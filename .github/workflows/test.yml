name: Test Eutardigrada.YOCKOW.jp
on:
  push:
    branches:
      - "*"
    paths:
      - ".github/workflows/*.yml"
      - ".swift-build-os"
      - ".swift-version"
      - "CGISources/**"
      - "docker-compose.*.yml"
      - "**/Dockerfile"
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      TEST_HTTP_PORT: "80"
      TEST_HTTPS_PORT: "443"
      TEST_SERVER_DOMAIN: eutardigrada.yockow.test
      TEST_CA_CERT: .certs/ca/dev-ca.crt
    steps:
      - name: Check out Repository
        uses: actions/checkout@v4
      - name: Get Build Conf
        id: get-build-conf
        run: |
          echo "swift-version=$(cat .swift-version)" >>"$GITHUB_OUTPUT"
          echo "os-nickname=$(cat .swift-build-os)" >>"$GITHUB_OUTPUT"
      - name: Cache .swift-scratch
        uses: actions/cache@v4
        with:
          path: .swift-scratch
          key: ${{ steps.get-build-conf.outputs.os-nickname }}-${{ steps.get-build-conf.outputs.swift-version }}-${{ hashFiles('CGISources/**/*.swift') }}
          restore-keys: |
            ${{ steps.get-build-conf.outputs.os-nickname }}-${{ steps.get-build-conf.outputs.swift-version }}-
            ${{ steps.get-build-conf.outputs.os-nickname }}-
      - name: Install dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install zsh
      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
      - name: Create 'swifche' group
        run: |
          sudo groupadd swifche
          sudo gpasswd --add $(whoami) swifche
      - name: Generate Certificates for development
        run: ./utils/generate-development-certificates
      - name: Start Development Server (Build Development Image)
        run: ./utils/start-development-server
      - name: Test HTTP
        run: |
          curl -v --retry 5 --retry-delay 2 --retry-all-errors --fail-with-body --resolve ${TEST_SERVER_DOMAIN}:${TEST_HTTP_PORT}:127.0.0.1 http://${TEST_SERVER_DOMAIN}:${TEST_HTTP_PORT}/
          curl -v --fail-with-body --resolve ${TEST_SERVER_DOMAIN}:${TEST_HTTP_PORT}:127.0.0.1 http://${TEST_SERVER_DOMAIN}:${TEST_HTTP_PORT}/shared.txt
      - name: Test HTTPS
        run: |
          curl -v --fail-with-body --http2 --cacert "${TEST_CA_CERT}" --resolve ${TEST_SERVER_DOMAIN}:${TEST_HTTPS_PORT}:127.0.0.1 https://${TEST_SERVER_DOMAIN}:${TEST_HTTPS_PORT}
          curl -v --fail-with-body --http2 --cacert "${TEST_CA_CERT}" --resolve ${TEST_SERVER_DOMAIN}:${TEST_HTTPS_PORT}:127.0.0.1 https://${TEST_SERVER_DOMAIN}:${TEST_HTTPS_PORT}/shared.txt
      - name: Test Single Swift File CGI
        run: curl --silent --fail-with-body --cacert "${TEST_CA_CERT}" --resolve ${TEST_SERVER_DOMAIN}:${TEST_HTTPS_PORT}:127.0.0.1 https://${TEST_SERVER_DOMAIN}:${TEST_HTTPS_PORT}/single-swift-file.cgi
      - name: Test Swift Package CGI
        run: curl --silent --fail-with-body --cacert "${TEST_CA_CERT}" --resolve ${TEST_SERVER_DOMAIN}:${TEST_HTTPS_PORT}:127.0.0.1 https://${TEST_SERVER_DOMAIN}:${TEST_HTTPS_PORT}/swift-package.cgi
      - name: Test "Acknowledgements"
        run: curl --silent --fail-with-body --cacert "${TEST_CA_CERT}" --resolve ${TEST_SERVER_DOMAIN}:${TEST_HTTPS_PORT}:127.0.0.1 https://${TEST_SERVER_DOMAIN}:${TEST_HTTPS_PORT}/acknowledgements
      - name: Stop Development Server
        run: ./utils/stop-development-server
